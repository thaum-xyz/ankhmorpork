SHELL=/bin/bash -o pipefail

MANIFESTS_DIR=manifests
JSONNET_VENDOR=jsonnet/vendor
JSONNETFMT_ARGS=-n 2 --max-blank-lines 2 --string-style s --comment-style s

TLD=$(shell git rev-parse --show-toplevel)
SCHEMAS_DIR=$(TLD)/tmp/schemas

KUBESCAPE_THRESHOLD=10

.PHONY: all
all: fmt generate

.PHONY: fmt
fmt:  ## Format code
	find . -name 'vendor' -prune -o -name '*.libsonnet' -print -o -name '*.jsonnet' -print | \
		xargs -n 1 -- jsonnetfmt $(JSONNETFMT_ARGS) -i

.PHONY: generate
generate: $(MANIFESTS_DIR) $(JSONNET_VENDOR)  ## Generate yaml code from jsonnet
	jsonnet -J jsonnet/vendor -c -m $(MANIFESTS_DIR) -S jsonnet/main.jsonnet
	$(MAKE) beautify

$(MANIFESTS_DIR):
	rm -rf $(MANIFESTS_DIR)
	mkdir -p $(MANIFESTS_DIR)

$(JSONNET_VENDOR):
	-cd jsonnet && jb install

.PHONY: beautify
beautify:  ## Make yaml files readable
	for i in $(shell find $(MANIFESTS_DIR)/ -name '*.yaml'); do yq --prettyPrint --no-colors --inplace "$$i"; done

.PHONY: clean
clean:  ## Clean vendored code
	rm -rf jsonnet/vendor

.PHONY: update
update:  ## Update jsonnet dependencies
	cd jsonnet && jb update
	rm -rf $(JSONNET_VENDOR)
	$(MAKE) generate

.PHONY: version-update
version-update:  ## Upgrade component version and image
	$(TLD)/hack/version-update.sh .
	if ! git diff-index --quiet HEAD .; then $(MAKE) generate; fi

$(SCHEMAS_DIR):
	$(TLD)/hack/generate-schemas.sh

.PHONY: validate
validate: $(MANIFESTS_DIR) $(SCHEMAS_DIR)
	kubeconform \
	-schema-location 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{ .NormalizedKubernetesVersion }}-standalone{{ .StrictSuffix }}/{{ .ResourceKind }}.json' \
	-schema-location '$(SCHEMAS_DIR)/{{ .ResourceKind }}.json' \
	-skip CustomResourceDefinition,SealedSecret,Kustomization,Provider,Alert,Receiver \
	-summary \
	$(MANIFESTS_DIR)

.PHONY: sec-scan
sec-scan:  ## Security scanning of manifests
	kubescape scan -s framework -t $(KUBESCAPE_THRESHOLD) nsa $(shell find $(MANIFESTS_DIR)/ -name '*.yaml') --exceptions 'kubescape-exceptions.json'

.PHONY: help
help:  ## Displays help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n\nTargets:\n"} /^[a-z0-9A-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 }' $(MAKEFILE_LIST)
