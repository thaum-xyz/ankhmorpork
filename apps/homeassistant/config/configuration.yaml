homeassistant:
  name: Home
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  elevation: !secret home_elevation
  unit_system: metric
  time_zone: Europe/Berlin
  customize: !include customize.yaml
  #auth_providers:
  #  - type: homeassistant
  #  - type: trusted_networks
  #    allow_bypass_login: true
  #    trusted_networks:
  #      - 192.168.2.0/24
  external_url: https://home.ankhmorpork.thaum.xyz

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
http:
  # base_url: https://home.ankhmorpork.thaum.xyz
  use_x_forwarded_for: true
  trusted_proxies: !secret trusted_proxies

#panel_iframe:
#  esphome:
#    title: "ESPHome"
#    url: "http://192.168.2.94:6052"
#    icon: "mdi:chip"
#    require_admin: true


# No-config integrations
#default_config:
# Redefine configuration options from default_config for more control
# Current list can be found in https://www.home-assistant.io/integrations/default_config/
automation: !include automations.yaml
#cloud:
config:
counter:
dhcp:
energy:
frontend:
history:
image:
#input_boolean: # configured in lower part of the file
input_datetime: # configured in lower part of the file
input_number:
#input_select:
input_text:
logbook:
map:
#media_source:
mobile_app:
my:
person:
scene: !include scenes.yaml
script: !include scripts.yaml
ssdp:
stream:
sun:
system_health:
#tag:
timer:
#updater:
webhook:
#zeroconf:
zone:
# END OF default_config

wake_on_lan:
media_extractor:

group:
  people:
    name: People
    entities:
    - person.pawel
    - person.adrianna

prometheus:
  namespace: hass
  filter:
    exclude_domains:
    - device_tracker
    - light

lock:
  - platform: kiwi
    username: !secret kiwi_username
    password: !secret kiwi_password

alarm_control_panel:
  - platform: manual
    name: Home Alarm
    code_arm_required: false
    arming_time: 60
    trigger_time: 600
    disarmed:
      trigger_time: 0
    armed_home:
      arming_time: 60
      delay_time: 30

climate:
- platform: generic_thermostat
  name: Fridge
  heater: light.on_off_plug_1
  target_sensor: sensor.fridge_temperature
  ac_mode: true
  min_temp: 4
  max_temp: 10
  target_temp: 6
  cold_tolerance: 1
  hot_tolerance: 1

# Sensors
sensor:
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
  - platform: rest
    name: mealie
    scan_interval: 3600
    headers:
      content-type: application/json
      authorization: !secret mealie_token
    resource: https://recipe.krupa.net.pl/api/meal-plans/today
    value_template: >
      {% if value_json is none %}
        No meal plan
      {% elif value_json.name %}
      {{   value_json.name }}
      {% elif value_json.detail %}
      {{   value_json.detail }}
      {% else %}
        unknown
      {% endif %}

template:
- sensor:
  - name: "ESP Display"
    state: "{{ states('switch.espdisplay_backlight') }}"
    attributes:
      # First 6 characters of each line are considered a static prefix
      line1: "LUNCH {{ states('sensor.mealie') }}"
      line2: >
        {%
          set calendars = [{
            "timestamp": as_timestamp(state_attr('sun.sun','next_midnight')) | int,
            "prefix": "00:00",
            "data": "--- NEXT DAY ---"
          },{
            "timestamp": as_timestamp(state_attr('calendar.pawel_krupa_net_pl','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.pawel_krupa_net_pl','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.pawel_krupa_net_pl','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.pawel_timescale_com','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.pawel_timescale_com','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.pawel_timescale_com','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.paulfantom','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.paulfantom','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.paulfantom','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.adrianna_wojas_gmail_com','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.adrianna_wojas_gmail_com','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.adrianna_wojas_gmail_com','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          }] | rejectattr("timestamp", "gt", as_timestamp(utcnow()) | int + 24*60*60) | sort(attribute='timestamp') 
        %}
        {{ calendars[0].prefix }} {{ calendars[0].data }}
      line3: >
        {%
          set calendars = [{
            "timestamp": as_timestamp(state_attr('sun.sun','next_midnight')) | int,
            "prefix": "00:00",
            "data": "--- NEXT DAY ---"
          },{
            "timestamp": as_timestamp(state_attr('calendar.pawel_krupa_net_pl','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.pawel_krupa_net_pl','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.pawel_krupa_net_pl','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.pawel_timescale_com','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.pawel_timescale_com','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.pawel_timescale_com','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.paulfantom','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.paulfantom','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.paulfantom','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.adrianna_wojas_gmail_com','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.adrianna_wojas_gmail_com','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.adrianna_wojas_gmail_com','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          }] | rejectattr("timestamp", "gt", as_timestamp(utcnow()) | int + 24*60*60) | sort(attribute='timestamp') 
        %}
        {% if calendars|length > 1 %}
        {{ calendars[1].prefix }} {{ calendars[1].data }}
        {% endif %}
      line4: >
        {%
          set calendars = [{
            "timestamp": as_timestamp(state_attr('calendar.pawel_krupa_net_pl','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.pawel_krupa_net_pl','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.pawel_krupa_net_pl','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.pawel_timescale_com','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.pawel_timescale_com','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.pawel_timescale_com','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.paulfantom','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.paulfantom','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.paulfantom','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          },{
            "timestamp": as_timestamp(state_attr('calendar.adrianna_wojas_gmail_com','start_time')) | int,
            "prefix": as_timestamp(state_attr('calendar.adrianna_wojas_gmail_com','start_time')) | int | timestamp_custom("%H:%M"),
            "data": state_attr('calendar.adrianna_wojas_gmail_com','message') | regex_replace(find='[^\x00-\x7F]+', replace='', ignorecase=False) | trim
          }] | rejectattr("timestamp", "gt", as_timestamp(utcnow()) | int + 24*60*60) | sort(attribute='timestamp') 
        %}
        {% if calendars|length >= 2 %}
        {{ calendars[2].prefix }} {{ calendars[2].data }}
        {% endif %}

input_boolean:
  projector:
    name: Projector State
    icon: mdi:projector
  projector_screen:
    name: Projector Screen State
    icon: mdi:projector-screen-variant-outline

input_select:
  speakers:
    name: Speakers Input
    icon: mdi:speakers
    options:
    - opt/coax
    - line1/2
    - bt
    initial: line1/2

plant:
  jovita:
    sensors:
      moisture: sensor.jovita_moisture
      temperature: sensor.jovita_temperature
      conductivity: sensor.jovita_soil_conductivity
      brightness: sensor.jovita_illuminance
    min_moisture: 15
    max_moisture: 60
    min_conductivity: 350
    max_conductivity: 2000
    min_temperature: 10
    max_temperature: 32
    min_brightness: 500
    max_brightness: 12000
  svetlana:
    sensors:
      moisture: sensor.svetlana_moisture
      temperature: sensor.svetlana_temperature
      conductivity: sensor.svetlana_soil_conductivity
      brightness: sensor.svetlana_illuminance
    min_moisture: 15
    max_moisture: 60
    min_conductivity: 350
    max_conductivity: 2000
    min_temperature: 10
    max_temperature: 32
    min_brightness: 500
    max_brightness: 12000
  violet:
    sensors:
      moisture: sensor.violet_moisture
      temperature: sensor.violet_temperature
      conductivity: sensor.violet_soil_conductivity
      brightness: sensor.violet_illuminance
    min_moisture: 15
    max_moisture: 60
    min_conductivity: 350
    max_conductivity: 2000
    min_temperature: 10
    max_temperature: 32
    min_brightness: 600
    max_brightness: 20000
  herbs:
    sensors:
      moisture: sensor.herbs_moisture
      temperature: sensor.herbs_temperature
      conductivity: sensor.herbs_soil_conductivity
      brightness: sensor.herbs_illuminance
    min_moisture: 15
    max_moisture: 60
    min_conductivity: 350
    max_conductivity: 2000
    min_temperature: 10
    max_temperature: 32
    min_brightness: 3700
    max_brightness: 60000
  basil:
    sensors:
      moisture: sensor.basil_moisture
      temperature: sensor.basil_temperature
      conductivity: sensor.basil_soil_conductivity
      brightness: sensor.basil_illuminance
    min_moisture: 15
    max_moisture: 60
    min_conductivity: 350
    max_conductivity: 2000
    min_temperature: 8
    max_temperature: 32
    min_brightness: 2500
    max_brightness: 60000

notify:
  - platform: slack
    name: slack
    api_key: !secret slack_api_key
    default_channel: '#home'
    username: "home-assistant"

switch:
  - platform: wake_on_lan
    name: pawel-pc
    host: "192.168.2.51"
    mac: !secret pawel_pc_mac
  - platform: wake_on_lan
    name: adus-pc
    host: "192.168.2.50"
    mac: !secret adus_pc_mac

google_assistant:
  project_id: ankhhomeassistant
  service_account: !include google_service_account.json
  report_state: true

google:
  client_id: !secret google_client_id
  client_secret: !secret google_client_secret
  calendar_access: "read_only"

sonoff:
  username: !secret sonoff_username
  password: !secret sonoff_password
  scan_interval: 60 #(optional, lower values than 60 won't work anymore!)
  mode: cloud
  #grace_period: 600 #(optional)
  #api_region: 'eu' #(optional)
  #entity_prefix: True #(optional)
  #debug: False #(optional)

recorder:
  db_url: !secret postgresql_uri
