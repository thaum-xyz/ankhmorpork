apiVersion: v1
data:
  configuration.yaml: |
    homeassistant:
      name: Home
      latitude: !secret home_latitude
      longitude: !secret home_longitude
      elevation: !secret home_elevation
      unit_system: metric
      time_zone: Europe/Berlin
      country: DE
      customize: !include customize.yaml
      #auth_providers:
      #  - type: homeassistant
      #  - type: trusted_networks
      #    allow_bypass_login: true
      #    trusted_networks:
      #      - 192.168.2.0/24
      external_url: https://home.ankhmorpork.thaum.xyz

    # Uncomment this if you are using SSL/TLS, running in Docker container, etc.
    http:
      # base_url: https://home.ankhmorpork.thaum.xyz
      use_x_forwarded_for: true
      trusted_proxies: !secret trusted_proxies

    websocket_api:

    #panel_iframe:
    #  esphome:
    #    title: "ESPHome"
    #    url: "http://192.168.2.94:6052"
    #    icon: "mdi:chip"
    #    require_admin: true


    # No-config integrations
    #default_config:
    # Redefine configuration options from default_config for more control
    # Current list can be found in https://www.home-assistant.io/integrations/default_config/
    automation: !include automations.yaml
    assist_pipeline:
    backup:
    #bluetooth:
    #cloud:
    config:
    conversation:
    counter:
    dhcp:
    energy:
    frontend:
    #hardware:
    history:
    homeassistant_alerts:
    image_upload:
    #input_boolean: # configured in lower part of the file
    input_button:
    input_datetime:
    input_number:
    #input_select:  # configured in lower part of the file
    input_text:
    logbook:
    logger: # CHECK
    map:
    #media_source:
    mobile_app:
    my:
    network:
    person:
    schedule:
    scene: !include scenes.yaml
    script: !include scripts.yaml
    ssdp:
    stream:
    sun:
    system_health:
    tag:
    timer:
    #usb:
    webhook:
    zeroconf:
    zone:
    # END OF default_config

    wake_on_lan:
    media_extractor:

    group:
      people:
        name: People
        entities:
        - person.pawel
        - person.adrianna

    prometheus:
      namespace: hass
      filter:
        exclude_domains:
        - device_tracker
        - light

    lock:
      - platform: kiwi
        username: !secret kiwi_username
        password: !secret kiwi_password

    alarm_control_panel:
      - platform: manual
        name: Home Alarm
        code_arm_required: false
        delay_time: 0
        arming_time: 60
        trigger_time: 600
        disarmed:
          trigger_time: 0
        armed_home:
          arming_time: 60
          delay_time: 30

    climate:
    - platform: generic_thermostat
      name: Fridge
      heater: light.on_off_plug_1
      target_sensor: sensor.ruuvitag_fridge_temperature
      ac_mode: true
      min_temp: 1
      max_temp: 8
      target_temp: 4
      cold_tolerance: 1
      hot_tolerance: 1

    template:
    - trigger:
      - platform: event
        event_type: "imap_content"
        id: "custom_event"
        event_data:
          sender: noreply@we-wash.com
          folder: we-wash
      sensor:
        - name: we_wash_t1
          state: >-
            {% if 'T1 is ready for pick up' in trigger.event.data["subject"] %}
              Ready
            {% elif 'T1 started' in trigger.event.data["subject"] %}
              In progress
            {% elif 'T1 is waiting for you' in trigger.event.data["subject"] %}
              Waiting
            {% else %}
              Unknown
            {% endif %}
        - name: we_wash_w1
          state: >-
            {% if 'W1 is ready for pick up' in trigger.event.data["subject"] %}
              Ready
            {% elif 'W1 started' in trigger.event.data["subject"] %}
              In progress
            {% elif 'W1 is waiting for you' in trigger.event.data["subject"] %}
              Waiting
            {% else %}
              Unknown
            {% endif %}
        - name: we_wash_w2
          state: >-
            {% if 'W2 is ready for pick up' in trigger.event.data["subject"] %}
              Ready
            {% elif 'W2 started' in trigger.event.data["subject"] %}
              In progress
            {% elif 'W2 is waiting for you' in trigger.event.data["subject"] %}
              Waiting
            {% else %}
              Unknown
            {% endif %}

    # Sensors
    sensor:
      - platform: websocket_api
      - platform: time_date
        display_options:
          - 'time'
          - 'date'

    rest:
      - resource: https://recipes.krupa.net.pl/api/meal-plan
        scan_interval: 1800
        headers:
          content-type: application/json
          authorization: !secret recipes_token
        params:
          from_date: >
            {{ now().strftime("%Y-%m-%d") }}
          to_date: >
            {{ now().strftime("%Y-%m-%d") }}
        sensor:
          - name: "Today's Breakfast"
            unique_id: "meal_today_breakfast"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Breakfast') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
          - name: "Today's Lunch"
            unique_id: "meal_today_lunch"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Lunch') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
          - name: "Today's Snack"
            unique_id: "meal_today_snack"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Snack') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
          - name: "Today's Dinner"
            unique_id: "meal_today_dinner"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Dinner') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
            json_attributes_path: "$.[?(@.meal_type_name=='Dinnert')].recipe"
            json_attributes:
              - image
              - id
              - name
      - resource: https://recipes.krupa.net.pl/api/meal-plan
        scan_interval: 1800
        headers:
          content-type: application/json
          authorization: !secret recipes_token
        params:
          from_date: >
            {{ (now().date() + timedelta(days=1)).strftime("%Y-%m-%d") }}
          to_date: >
            {{ (now().date() + timedelta(days=1)).strftime("%Y-%m-%d") }}
        sensor:
          - name: "Tomorrow's Breakfast"
            unique_id: "meal_tomorrow_breakfast"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Breakfast') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
          - name: "Tomorrow's Lunch"
            unique_id: "meal_tomorrow_lunch"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Lunch') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
          - name: "Tomorrow's Snack"
            unique_id: "meal_tomorrow_snack"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Snack') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
          - name: "Tomorrow's Dinner"
            unique_id: "meal_tomorrow_dinner"
            value_template: >
              {% set data = value_json | selectattr('meal_type_name', 'eq', 'Dinner') | first -%}
              {{ data.title if data.title else data.recipe_name | default() }}
            json_attributes_path: "$.[?(@.meal_type_name=='Dinnert')].recipe"
            json_attributes:
              - image
              - id
              - name

      #- name: we_wash_w1
      #  platform: imap_email_content
      #  server: imap.gmail.com
      #  port: 993
      #  username: !secret gmail_imap_username
      #  password: !secret gmail_imap_password
      #  folder: we-wash/W1
      #  senders:
      #    - noreply@we-wash.com
      #  value_template: >-
      #    {% if 'ready for pick up' in subject %}
      #      Ready
      #    {% elif 'started' in subject %}
      #      In progress
      #    {% elif 'waiting for you' in subject %}
      #      Waiting
      #    {% else %}
      #      Unknown
      #    {% endif %}
      #- name: we_wash_w2
      #  platform: imap_email_content
      #  server: imap.gmail.com
      #  port: 993
      #  username: !secret gmail_imap_username
      #  password: !secret gmail_imap_password
      #  folder: we-wash/W2
      #  senders:
      #    - noreply@we-wash.com
      #  value_template: >-
      #    {% if 'ready for pick up' in subject %}
      #      Ready
      #    {% elif 'started' in subject %}
      #      In progress
      #    {% elif 'waiting for you' in subject %}
      #      Waiting
      #    {% else %}
      #      Unknown
      #    {% endif %}

    cover:
      - platform: template
        covers:
          projector_screen:
            device_class: blind
            friendly_name: "Projector Screen"
            value_template: "{{ not (states('binary_sensor.projector_screen_sensor') | bool) }}"
            open_cover:
              service: remote.send_command
              target:
                entity_id: remote.sonoff_10011faac6
              data:
                device: RFBridge433
                command: Up
            close_cover:
              service: remote.send_command
              target:
                entity_id: remote.sonoff_10011faac6
              data:
                device: RFBridge433
                command: Down
            stop_cover:
              service: remote.send_command
              target:
                entity_id: remote.sonoff_10011faac6
              data:
                device: RFBridge433
                command: Stop

    switch:
      - platform: template
        switches:
          projector:
            friendly_name: "Projector"
            unique_id: projector_anker_nebula
            turn_on:
            - service: switch.turn_on
              target:
                entity_id: switch.projector_switch
            - service: remote.send_command
              data:
                device: nebula
                command: toggle
                num_repeats: 2
                delay_secs: 0.5
                hold_secs: 0
              target:
                entity_id: remote.broadlink
            - delay:
                hours: 0
                minutes: 0
                seconds: 20
                milliseconds: 0
            turn_off:
            - service: remote.send_command
              data:
                device: nebula
                command: toggle
                num_repeats: 2
                delay_secs: 0.5
                hold_secs: 0
              target:
                entity_id: remote.broadlink
            - delay:
                hours: 0
                minutes: 0
                seconds: 5
                milliseconds: 0
            - service: switch.turn_off
              target:
                entity_id: switch.projector_switch
            - delay:
                hours: 0
                minutes: 0
                seconds: 5
                milliseconds: 0
            - service: switch.turn_on
              target:
                entity_id: switch.projector_switch
            icon_template: >
              {% if this.state == 'on' %}
                mdi:projector
              {% else %}
                mdi:projector-off
              {% endif %}
      - platform: wake_on_lan
        name: pawel-pc
        host: "192.168.2.51"
        mac: !secret pawel_pc_mac
      - platform: wake_on_lan
        name: adus-pc
        host: "192.168.2.50"
        mac: !secret adus_pc_mac

    input_boolean:
      movie_time:
        name: Movie Time
        icon: mdi:movie-open

    input_select:
      speakers:
        name: Speakers Input
        icon: mdi:speaker-multiple
        options:
        - opt/coax
        - line1/2
        - bt
        initial: opt/coax

    plant:
      jovita:
        sensors:
          moisture: sensor.jovita_moisture
          temperature: sensor.jovita_temperature
          conductivity: sensor.jovita_soil_conductivity
          brightness: sensor.jovita_illuminance
        min_moisture: 15
        max_moisture: 60
        min_conductivity: 350
        max_conductivity: 2000
        min_temperature: 10
        max_temperature: 32
        min_brightness: 500
        max_brightness: 12000
      svetlana:
        sensors:
          moisture: sensor.svetlana_plant_moisture
          temperature: sensor.svetlana_plant_temperature
          conductivity: sensor.svetlana_plant_conductivity
          brightness: sensor.svetlana_plant_illuminance
        min_moisture: 15
        max_moisture: 60
        min_conductivity: 350
        max_conductivity: 2000
        min_temperature: 10
        max_temperature: 32
        min_brightness: 500
        max_brightness: 12000
      violet:
        sensors:
          moisture: sensor.violet_moisture
          temperature: sensor.violet_temperature
          conductivity: sensor.violet_soil_conductivity
          brightness: sensor.violet_illuminance
        min_moisture: 15
        max_moisture: 60
        min_conductivity: 350
        max_conductivity: 2000
        min_temperature: 10
        max_temperature: 32
        min_brightness: 600
        max_brightness: 20000
      herbs:
        sensors:
          moisture: sensor.herbs_moisture
          temperature: sensor.herbs_temperature
          conductivity: sensor.herbs_soil_conductivity
          brightness: sensor.herbs_illuminance
        min_moisture: 15
        max_moisture: 60
        min_conductivity: 350
        max_conductivity: 2000
        min_temperature: 10
        max_temperature: 32
        min_brightness: 3700
        max_brightness: 60000
      basil:
        sensors:
          moisture: sensor.basil_moisture
          temperature: sensor.basil_temperature
          conductivity: sensor.basil_soil_conductivity
          brightness: sensor.basil_illuminance
        min_moisture: 15
        max_moisture: 60
        min_conductivity: 350
        max_conductivity: 2000
        min_temperature: 8
        max_temperature: 32
        min_brightness: 2500
        max_brightness: 60000

    sonoff:
      username: !secret sonoff_username
      password: !secret sonoff_password
      scan_interval: 60 #(optional, lower values than 60 won't work anymore!)
      mode: auto
      #grace_period: 600 #(optional)
      #api_region: 'eu' #(optional)
      #entity_prefix: True #(optional)
      #debug: False #(optional)

    recorder:
      db_url: !secret postgresql_uri
  customize.yaml: |
    switch.adus_pc:
      icon: 'mdi:desktop-classic'
    switch.pawel_pc:
      icon: 'mdi:desktop-classic'
    sensor.we_wash_t1:
      friendly_name: 'Tumble dryer 1'
      icon: 'mdi:tumble-dryer'
    sensor.we_wash_w1:
      friendly_name: 'Washing machine 1'
      icon: 'mdi:washing-machine'
    sensor.we_wash_w2:
      friendly_name: 'Washing machine 2'
      icon: 'mdi:washing-machine'
  scripts.yaml: |
    speakers_line1:
      sequence:
      - service: remote.send_command
        data:
          entity_id: remote.broadlink
          device: speakers
          command: "opt/coax"
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 0
      - service: remote.send_command
        data:
          entity_id: remote.broadlink
          device: speakers
          command: "line1/2"
      mode: single
      icon: mdi:cast-audio
    alarm_picture_notification:
      alias: Alarm Picture Notification
      sequence:
      - service: camera.snapshot
        data:
          entity_id: camera.hall_high
          filename: /config/www/images/{{ filename }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
          milliseconds: 0
      - data_template:
          data:
            blocks:
            - accessory:
                style: danger
                text:
                  text: Go to HomeAssistant
                  type: plain_text
                type: button
                url: https://home.ankhmorpork.thaum.xyz
              text:
                text: Alarm has been triggered at {{ states('sensor.time') }}
                type: mrkdwn
              type: section
            - alt_text: Camera picture
              image_url: https://home.ankhmorpork.thaum.xyz/local/images/{{ filename }}
              title:
                text: Camera picture
                type: plain_text
              type: image
          message: ALARM! @paulfantom
          title: Last picture
        service: notify.slack
      - service: notify.notify
        data:
          message: Someone entered apartment while alarm is armed.
          title: Home alarm triggered!
          data:
            clickAction: https://home.ankhmorpork.thaum.xyz/local/images/{{ filename }}
            color: red
            ledColor: red
            persistent: true
            tag: persistent
      variables:
        filename: hall_{{ now().strftime('%Y-%m-%d_%H:%M') }}.jpg
      mode: single
      icon: mdi:camera
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: homeassistant
    app.kubernetes.io/part-of: homeassistant
    app.kubernetes.io/version: 2023.10.5
  name: homeassistant-configs
  namespace: homeassistant
