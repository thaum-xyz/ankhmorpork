apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: webservice
    app.kubernetes.io/name: paperless
    app.kubernetes.io/version: 1.10.2
  name: paperless
  namespace: paperless
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: webservice
      app.kubernetes.io/name: paperless
  serviceName: paperless
  template:
    metadata:
      annotations:
        checksum.config/md5: 0df4aa3cb8fc36842a200024d31d58ae
        checksum.database/md5: f7691eaa4c66b8b5eba7f8a180f37bbc
        checksum.secrets/md5: 9aa8755169fd680444330b9e1d948f68
        kubectl.kubernetes.io/default-container: paperless
      labels:
        app.kubernetes.io/component: webservice
        app.kubernetes.io/name: paperless
        app.kubernetes.io/version: 1.10.2
    spec:
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PAPERLESS_ALLOWED_HOSTS
          value: paperless.paperless.svc,$(POD_IP)
        envFrom:
        - configMapRef:
            name: paperless-config
        - secretRef:
            name: paperless-secrets
        - secretRef:
            name: paperless-db
        image: ghcr.io/paperless-ngx/paperless-ngx:1.10.2
        name: paperless
        ports:
        - containerPort: 8000
          name: http
        resources:
          limits:
            cpu: 500m
            memory: 800Mi
          requests:
            cpu: 200m
            memory: 500Mi
        securityContext:
          privileged: false
        volumeMounts:
        - mountPath: /usr/src/paperless/data
          name: data
        - mountPath: /usr/src/paperless/media
          name: media
        - mountPath: /usr/src/paperless/consume
          name: consume
      nodeSelector:
        kubernetes.io/arch: amd64
      restartPolicy: Always
      serviceAccountName: paperless
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data
      - name: media
        persistentVolumeClaim:
          claimName: media
      - name: consume
        persistentVolumeClaim:
          claimName: consume
